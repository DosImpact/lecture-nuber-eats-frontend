"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type DishChoice {
  name: String!
  extra: Int
}

type DishOption {
  name: String!
  choices: [DishChoice!]
  extra: Int
}

type Dish {
  id: Float!
  createdAt: String!
  updatedAt: String!
  name: String!
  price: Int!
  photo: String
  description: String!
  restaurant: Restaurant!
  options: [DishOption!]
}

type OrderItemOption {
  name: String!
  choice: String
}

type OrderItem {
  id: Float!
  createdAt: String!
  updatedAt: String!
  dish: Dish!
  options: [OrderItemOption!]
}

type Order {
  id: Float!
  createdAt: String!
  updatedAt: String!
  customer: User
  driver: User
  restaurant: Restaurant
  items: [OrderItem!]!
  total: Float
  status: OrderStatus!
}

enum OrderStatus {
  Pending
  Cooking
  Cooked
  PickedUp
  Delivered
}

type Category {
  id: Float!
  createdAt: String!
  updatedAt: String!
  name: String!
  coverImg: String
  slug: String!
  restaurants: [Restaurant!]!
  restaurantCount: Int!
}

type Restaurant {
  id: Float!
  createdAt: String!
  updatedAt: String!
  name: String!
  coverImg: String!
  address: String
  category: Category
  owner: User
  menu: [Dish!]!
  orders: [Order!]!
}

type User {
  id: Float!
  createdAt: String!
  updatedAt: String!
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurant: [Restaurant!]
  orders: [Order!]!
  rides: [Order!]!
}

enum UserRole {
  Owner
  Client
  Delivery
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type VerfiyEmailOutput {
  error: String
  ok: Boolean!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type AllCategoriesOutput {
  error: String
  ok: Boolean!
  categories: [Category!]
}

type CategoryOutput {
  error: String
  ok: Boolean!
  totalPage: Int
  totalResults: Int
  restaurants: Restaurant
  category: Category
}

type CreateDishOutput {
  error: String
  ok: Boolean!
}

type CreateRestauranOutput {
  error: String
  ok: Boolean!
}

type DeleteDishOutput {
  error: String
  ok: Boolean!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type EditDishOutput {
  error: String
  ok: Boolean!
}

type EditRestaurantOutput {
  error: String
  ok: Boolean!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  totalPage: Int
  totalResults: Int
  results: [Restaurant!]
}

type SearchRestaurantsOutput {
  error: String
  ok: Boolean!
  totalPage: Int
  totalResults: Int
  restaurants: [Restaurant!]
}

type CreateOrderOutput {
  error: String
  ok: Boolean!
}

type GetOrdersOutput {
  error: String
  ok: Boolean!
  orders: [Order!]
}

type GetOrderOutput {
  error: String
  ok: Boolean!
  order: Order
}

type EditOrderOutput {
  error: String
  ok: Boolean!
}

type TakeOrderOutput {
  error: String
  ok: Boolean!
}

type Query {
  hi: Boolean!
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
  restaurants(input: RestaurantsInput!): RestaurantsOutput!
  restaurant(input: RestaurantInput!): RestaurantOutput!
  searchRestaurant: SearchRestaurantsOutput!
  allCategories: AllCategoriesOutput!
  category(input: CategoryInput!): CategoryOutput!
  getOrders(input: GetOrdersInput!): GetOrdersOutput!
  getOrder(input: GetOrderInput!): GetOrderOutput!
}

input RestaurantsInput {
  page: Int = 1
}

input RestaurantInput {
  restaurantId: Int!
}

input CategoryInput {
  page: Int = 1
  slug: String!
}

input GetOrdersInput {
  status: OrderStatus
}

input GetOrderInput {
  id: Float!
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  editProfile(input: EditProfileInput!): EditProfileOutput!
  verifyEmail(input: VerifyEmailInput!): VerfiyEmailOutput!
  createRestaurant(input: CreateRestaurantInput!): CreateRestauranOutput!
  editRestaurant(input: EditRestaurantInput!): EditRestaurantOutput!
  deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createDish(input: CreateDishInput!): CreateDishOutput!
  editDish(input: EditDishInput!): EditDishOutput!
  deleteDish(input: DeleteDishInput!): DeleteDishOutput!
  createOrder(input: CreateOrderInput!): CreateOrderOutput!
  editOrder(input: EditOrderInput!): EditOrderOutput!
  takeOrder(input: TakeOrderInput!): TakeOrderOutput!
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

input LoginInput {
  email: String!
  password: String!
}

input EditProfileInput {
  email: String
  password: String
}

input VerifyEmailInput {
  code: String!
}

input CreateRestaurantInput {
  name: String!
  coverImg: String!
  address: String = "주소를 입력해주세요"
  categoryName: String!
}

input EditRestaurantInput {
  name: String
  coverImg: String
  address: String = "주소를 입력해주세요"
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input CreateDishInput {
  name: String!
  price: Int!
  description: String!
  options: [DishOptionInputType!]
  restaurantId: Int!
}

input DishOptionInputType {
  name: String!
  choices: [DishChoiceInputType!]
  extra: Int
}

input DishChoiceInputType {
  name: String!
  extra: Int
}

input EditDishInput {
  name: String!
  price: Int!
  photo: String
  description: String!
  dishId: Int!
}

input DeleteDishInput {
  dishId: Int!
}

input CreateOrderInput {
  restaurantId: Int!
  items: [CreateOrderItemInput!]!
}

input CreateOrderItemInput {
  dishId: Int!
  options: [OrderItemOptionInputType!]
}

input OrderItemOptionInputType {
  name: String!
  choice: String
}

input EditOrderInput {
  id: Float!
  status: OrderStatus!
}

input TakeOrderInput {
  id: Float!
}

type Subscription {
  pendingOrders: Order!
  cookedOrders: Order!
  orderUpdates(input: OrderUpdatesInput!): Order!
}

input OrderUpdatesInput {
  id: Float!
}
